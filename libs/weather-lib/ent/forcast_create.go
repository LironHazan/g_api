// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"g_api/libs/weather-lib/ent/forcast"
	"g_api/libs/weather-lib/ent/weather"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ForcastCreate is the builder for creating a Forcast entity.
type ForcastCreate struct {
	config
	mutation *ForcastMutation
	hooks    []Hook
}

// SetCountry sets the "country" field.
func (fc *ForcastCreate) SetCountry(s string) *ForcastCreate {
	fc.mutation.SetCountry(s)
	return fc
}

// SetRegion sets the "region" field.
func (fc *ForcastCreate) SetRegion(s string) *ForcastCreate {
	fc.mutation.SetRegion(s)
	return fc
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (fc *ForcastCreate) SetNillableRegion(s *string) *ForcastCreate {
	if s != nil {
		fc.SetRegion(*s)
	}
	return fc
}

// SetDate sets the "date" field.
func (fc *ForcastCreate) SetDate(t time.Time) *ForcastCreate {
	fc.mutation.SetDate(t)
	return fc
}

// SetLocaltime sets the "localtime" field.
func (fc *ForcastCreate) SetLocaltime(t time.Time) *ForcastCreate {
	fc.mutation.SetLocaltime(t)
	return fc
}

// SetNillableLocaltime sets the "localtime" field if the given value is not nil.
func (fc *ForcastCreate) SetNillableLocaltime(t *time.Time) *ForcastCreate {
	if t != nil {
		fc.SetLocaltime(*t)
	}
	return fc
}

// SetIcon sets the "icon" field.
func (fc *ForcastCreate) SetIcon(s string) *ForcastCreate {
	fc.mutation.SetIcon(s)
	return fc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (fc *ForcastCreate) SetNillableIcon(s *string) *ForcastCreate {
	if s != nil {
		fc.SetIcon(*s)
	}
	return fc
}

// SetMaxTemp sets the "max_temp" field.
func (fc *ForcastCreate) SetMaxTemp(f float64) *ForcastCreate {
	fc.mutation.SetMaxTemp(f)
	return fc
}

// SetNillableMaxTemp sets the "max_temp" field if the given value is not nil.
func (fc *ForcastCreate) SetNillableMaxTemp(f *float64) *ForcastCreate {
	if f != nil {
		fc.SetMaxTemp(*f)
	}
	return fc
}

// SetMinTemp sets the "min_temp" field.
func (fc *ForcastCreate) SetMinTemp(f float64) *ForcastCreate {
	fc.mutation.SetMinTemp(f)
	return fc
}

// SetNillableMinTemp sets the "min_temp" field if the given value is not nil.
func (fc *ForcastCreate) SetNillableMinTemp(f *float64) *ForcastCreate {
	if f != nil {
		fc.SetMinTemp(*f)
	}
	return fc
}

// SetAvgTemp sets the "avg_temp" field.
func (fc *ForcastCreate) SetAvgTemp(f float64) *ForcastCreate {
	fc.mutation.SetAvgTemp(f)
	return fc
}

// SetNillableAvgTemp sets the "avg_temp" field if the given value is not nil.
func (fc *ForcastCreate) SetNillableAvgTemp(f *float64) *ForcastCreate {
	if f != nil {
		fc.SetAvgTemp(*f)
	}
	return fc
}

// AddWeatherIDs adds the "weather" edge to the Weather entity by IDs.
func (fc *ForcastCreate) AddWeatherIDs(ids ...int) *ForcastCreate {
	fc.mutation.AddWeatherIDs(ids...)
	return fc
}

// AddWeather adds the "weather" edges to the Weather entity.
func (fc *ForcastCreate) AddWeather(w ...*Weather) *ForcastCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fc.AddWeatherIDs(ids...)
}

// Mutation returns the ForcastMutation object of the builder.
func (fc *ForcastCreate) Mutation() *ForcastMutation {
	return fc.mutation
}

// Save creates the Forcast in the database.
func (fc *ForcastCreate) Save(ctx context.Context) (*Forcast, error) {
	fc.defaults()
	return withHooks[*Forcast, ForcastMutation](ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *ForcastCreate) SaveX(ctx context.Context) *Forcast {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *ForcastCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *ForcastCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *ForcastCreate) defaults() {
	if _, ok := fc.mutation.MaxTemp(); !ok {
		v := forcast.DefaultMaxTemp
		fc.mutation.SetMaxTemp(v)
	}
	if _, ok := fc.mutation.MinTemp(); !ok {
		v := forcast.DefaultMinTemp
		fc.mutation.SetMinTemp(v)
	}
	if _, ok := fc.mutation.AvgTemp(); !ok {
		v := forcast.DefaultAvgTemp
		fc.mutation.SetAvgTemp(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *ForcastCreate) check() error {
	if _, ok := fc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "Forcast.country"`)}
	}
	if v, ok := fc.mutation.Country(); ok {
		if err := forcast.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Forcast.country": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Forcast.date"`)}
	}
	if _, ok := fc.mutation.MaxTemp(); !ok {
		return &ValidationError{Name: "max_temp", err: errors.New(`ent: missing required field "Forcast.max_temp"`)}
	}
	if _, ok := fc.mutation.MinTemp(); !ok {
		return &ValidationError{Name: "min_temp", err: errors.New(`ent: missing required field "Forcast.min_temp"`)}
	}
	if _, ok := fc.mutation.AvgTemp(); !ok {
		return &ValidationError{Name: "avg_temp", err: errors.New(`ent: missing required field "Forcast.avg_temp"`)}
	}
	return nil
}

func (fc *ForcastCreate) sqlSave(ctx context.Context) (*Forcast, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *ForcastCreate) createSpec() (*Forcast, *sqlgraph.CreateSpec) {
	var (
		_node = &Forcast{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(forcast.Table, sqlgraph.NewFieldSpec(forcast.FieldID, field.TypeInt))
	)
	if value, ok := fc.mutation.Country(); ok {
		_spec.SetField(forcast.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := fc.mutation.Region(); ok {
		_spec.SetField(forcast.FieldRegion, field.TypeString, value)
		_node.Region = value
	}
	if value, ok := fc.mutation.Date(); ok {
		_spec.SetField(forcast.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := fc.mutation.Localtime(); ok {
		_spec.SetField(forcast.FieldLocaltime, field.TypeTime, value)
		_node.Localtime = value
	}
	if value, ok := fc.mutation.Icon(); ok {
		_spec.SetField(forcast.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := fc.mutation.MaxTemp(); ok {
		_spec.SetField(forcast.FieldMaxTemp, field.TypeFloat64, value)
		_node.MaxTemp = value
	}
	if value, ok := fc.mutation.MinTemp(); ok {
		_spec.SetField(forcast.FieldMinTemp, field.TypeFloat64, value)
		_node.MinTemp = value
	}
	if value, ok := fc.mutation.AvgTemp(); ok {
		_spec.SetField(forcast.FieldAvgTemp, field.TypeFloat64, value)
		_node.AvgTemp = value
	}
	if nodes := fc.mutation.WeatherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forcast.WeatherTable,
			Columns: []string{forcast.WeatherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weather.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ForcastCreateBulk is the builder for creating many Forcast entities in bulk.
type ForcastCreateBulk struct {
	config
	builders []*ForcastCreate
}

// Save creates the Forcast entities in the database.
func (fcb *ForcastCreateBulk) Save(ctx context.Context) ([]*Forcast, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Forcast, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ForcastMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *ForcastCreateBulk) SaveX(ctx context.Context) []*Forcast {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *ForcastCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *ForcastCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
