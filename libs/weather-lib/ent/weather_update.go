// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"g_api/libs/weather-lib/ent/forcast"
	"g_api/libs/weather-lib/ent/predicate"
	"g_api/libs/weather-lib/ent/weather"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WeatherUpdate is the builder for updating Weather entities.
type WeatherUpdate struct {
	config
	hooks    []Hook
	mutation *WeatherMutation
}

// Where appends a list predicates to the WeatherUpdate builder.
func (wu *WeatherUpdate) Where(ps ...predicate.Weather) *WeatherUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetIcon sets the "icon" field.
func (wu *WeatherUpdate) SetIcon(s string) *WeatherUpdate {
	wu.mutation.SetIcon(s)
	return wu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (wu *WeatherUpdate) SetNillableIcon(s *string) *WeatherUpdate {
	if s != nil {
		wu.SetIcon(*s)
	}
	return wu
}

// ClearIcon clears the value of the "icon" field.
func (wu *WeatherUpdate) ClearIcon() *WeatherUpdate {
	wu.mutation.ClearIcon()
	return wu
}

// SetTime sets the "time" field.
func (wu *WeatherUpdate) SetTime(i int) *WeatherUpdate {
	wu.mutation.ResetTime()
	wu.mutation.SetTime(i)
	return wu
}

// AddTime adds i to the "time" field.
func (wu *WeatherUpdate) AddTime(i int) *WeatherUpdate {
	wu.mutation.AddTime(i)
	return wu
}

// SetTimeEpoch sets the "time_epoch" field.
func (wu *WeatherUpdate) SetTimeEpoch(t time.Time) *WeatherUpdate {
	wu.mutation.SetTimeEpoch(t)
	return wu
}

// SetNillableTimeEpoch sets the "time_epoch" field if the given value is not nil.
func (wu *WeatherUpdate) SetNillableTimeEpoch(t *time.Time) *WeatherUpdate {
	if t != nil {
		wu.SetTimeEpoch(*t)
	}
	return wu
}

// ClearTimeEpoch clears the value of the "time_epoch" field.
func (wu *WeatherUpdate) ClearTimeEpoch() *WeatherUpdate {
	wu.mutation.ClearTimeEpoch()
	return wu
}

// SetTemp sets the "temp" field.
func (wu *WeatherUpdate) SetTemp(f float64) *WeatherUpdate {
	wu.mutation.ResetTemp()
	wu.mutation.SetTemp(f)
	return wu
}

// AddTemp adds f to the "temp" field.
func (wu *WeatherUpdate) AddTemp(f float64) *WeatherUpdate {
	wu.mutation.AddTemp(f)
	return wu
}

// SetFeelsLike sets the "feels_like" field.
func (wu *WeatherUpdate) SetFeelsLike(f float64) *WeatherUpdate {
	wu.mutation.ResetFeelsLike()
	wu.mutation.SetFeelsLike(f)
	return wu
}

// AddFeelsLike adds f to the "feels_like" field.
func (wu *WeatherUpdate) AddFeelsLike(f float64) *WeatherUpdate {
	wu.mutation.AddFeelsLike(f)
	return wu
}

// SetForcastID sets the "forcast" edge to the Forcast entity by ID.
func (wu *WeatherUpdate) SetForcastID(id int) *WeatherUpdate {
	wu.mutation.SetForcastID(id)
	return wu
}

// SetNillableForcastID sets the "forcast" edge to the Forcast entity by ID if the given value is not nil.
func (wu *WeatherUpdate) SetNillableForcastID(id *int) *WeatherUpdate {
	if id != nil {
		wu = wu.SetForcastID(*id)
	}
	return wu
}

// SetForcast sets the "forcast" edge to the Forcast entity.
func (wu *WeatherUpdate) SetForcast(f *Forcast) *WeatherUpdate {
	return wu.SetForcastID(f.ID)
}

// Mutation returns the WeatherMutation object of the builder.
func (wu *WeatherUpdate) Mutation() *WeatherMutation {
	return wu.mutation
}

// ClearForcast clears the "forcast" edge to the Forcast entity.
func (wu *WeatherUpdate) ClearForcast() *WeatherUpdate {
	wu.mutation.ClearForcast()
	return wu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WeatherUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WeatherMutation](ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WeatherUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WeatherUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WeatherUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WeatherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(weather.Table, weather.Columns, sqlgraph.NewFieldSpec(weather.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Icon(); ok {
		_spec.SetField(weather.FieldIcon, field.TypeString, value)
	}
	if wu.mutation.IconCleared() {
		_spec.ClearField(weather.FieldIcon, field.TypeString)
	}
	if value, ok := wu.mutation.Time(); ok {
		_spec.SetField(weather.FieldTime, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedTime(); ok {
		_spec.AddField(weather.FieldTime, field.TypeInt, value)
	}
	if value, ok := wu.mutation.TimeEpoch(); ok {
		_spec.SetField(weather.FieldTimeEpoch, field.TypeTime, value)
	}
	if wu.mutation.TimeEpochCleared() {
		_spec.ClearField(weather.FieldTimeEpoch, field.TypeTime)
	}
	if value, ok := wu.mutation.Temp(); ok {
		_spec.SetField(weather.FieldTemp, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.AddedTemp(); ok {
		_spec.AddField(weather.FieldTemp, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.FeelsLike(); ok {
		_spec.SetField(weather.FieldFeelsLike, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.AddedFeelsLike(); ok {
		_spec.AddField(weather.FieldFeelsLike, field.TypeFloat64, value)
	}
	if wu.mutation.ForcastCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weather.ForcastTable,
			Columns: []string{weather.ForcastColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forcast.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.ForcastIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weather.ForcastTable,
			Columns: []string{weather.ForcastColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forcast.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weather.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WeatherUpdateOne is the builder for updating a single Weather entity.
type WeatherUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WeatherMutation
}

// SetIcon sets the "icon" field.
func (wuo *WeatherUpdateOne) SetIcon(s string) *WeatherUpdateOne {
	wuo.mutation.SetIcon(s)
	return wuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (wuo *WeatherUpdateOne) SetNillableIcon(s *string) *WeatherUpdateOne {
	if s != nil {
		wuo.SetIcon(*s)
	}
	return wuo
}

// ClearIcon clears the value of the "icon" field.
func (wuo *WeatherUpdateOne) ClearIcon() *WeatherUpdateOne {
	wuo.mutation.ClearIcon()
	return wuo
}

// SetTime sets the "time" field.
func (wuo *WeatherUpdateOne) SetTime(i int) *WeatherUpdateOne {
	wuo.mutation.ResetTime()
	wuo.mutation.SetTime(i)
	return wuo
}

// AddTime adds i to the "time" field.
func (wuo *WeatherUpdateOne) AddTime(i int) *WeatherUpdateOne {
	wuo.mutation.AddTime(i)
	return wuo
}

// SetTimeEpoch sets the "time_epoch" field.
func (wuo *WeatherUpdateOne) SetTimeEpoch(t time.Time) *WeatherUpdateOne {
	wuo.mutation.SetTimeEpoch(t)
	return wuo
}

// SetNillableTimeEpoch sets the "time_epoch" field if the given value is not nil.
func (wuo *WeatherUpdateOne) SetNillableTimeEpoch(t *time.Time) *WeatherUpdateOne {
	if t != nil {
		wuo.SetTimeEpoch(*t)
	}
	return wuo
}

// ClearTimeEpoch clears the value of the "time_epoch" field.
func (wuo *WeatherUpdateOne) ClearTimeEpoch() *WeatherUpdateOne {
	wuo.mutation.ClearTimeEpoch()
	return wuo
}

// SetTemp sets the "temp" field.
func (wuo *WeatherUpdateOne) SetTemp(f float64) *WeatherUpdateOne {
	wuo.mutation.ResetTemp()
	wuo.mutation.SetTemp(f)
	return wuo
}

// AddTemp adds f to the "temp" field.
func (wuo *WeatherUpdateOne) AddTemp(f float64) *WeatherUpdateOne {
	wuo.mutation.AddTemp(f)
	return wuo
}

// SetFeelsLike sets the "feels_like" field.
func (wuo *WeatherUpdateOne) SetFeelsLike(f float64) *WeatherUpdateOne {
	wuo.mutation.ResetFeelsLike()
	wuo.mutation.SetFeelsLike(f)
	return wuo
}

// AddFeelsLike adds f to the "feels_like" field.
func (wuo *WeatherUpdateOne) AddFeelsLike(f float64) *WeatherUpdateOne {
	wuo.mutation.AddFeelsLike(f)
	return wuo
}

// SetForcastID sets the "forcast" edge to the Forcast entity by ID.
func (wuo *WeatherUpdateOne) SetForcastID(id int) *WeatherUpdateOne {
	wuo.mutation.SetForcastID(id)
	return wuo
}

// SetNillableForcastID sets the "forcast" edge to the Forcast entity by ID if the given value is not nil.
func (wuo *WeatherUpdateOne) SetNillableForcastID(id *int) *WeatherUpdateOne {
	if id != nil {
		wuo = wuo.SetForcastID(*id)
	}
	return wuo
}

// SetForcast sets the "forcast" edge to the Forcast entity.
func (wuo *WeatherUpdateOne) SetForcast(f *Forcast) *WeatherUpdateOne {
	return wuo.SetForcastID(f.ID)
}

// Mutation returns the WeatherMutation object of the builder.
func (wuo *WeatherUpdateOne) Mutation() *WeatherMutation {
	return wuo.mutation
}

// ClearForcast clears the "forcast" edge to the Forcast entity.
func (wuo *WeatherUpdateOne) ClearForcast() *WeatherUpdateOne {
	wuo.mutation.ClearForcast()
	return wuo
}

// Where appends a list predicates to the WeatherUpdate builder.
func (wuo *WeatherUpdateOne) Where(ps ...predicate.Weather) *WeatherUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WeatherUpdateOne) Select(field string, fields ...string) *WeatherUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Weather entity.
func (wuo *WeatherUpdateOne) Save(ctx context.Context) (*Weather, error) {
	return withHooks[*Weather, WeatherMutation](ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WeatherUpdateOne) SaveX(ctx context.Context) *Weather {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WeatherUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WeatherUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WeatherUpdateOne) sqlSave(ctx context.Context) (_node *Weather, err error) {
	_spec := sqlgraph.NewUpdateSpec(weather.Table, weather.Columns, sqlgraph.NewFieldSpec(weather.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Weather.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weather.FieldID)
		for _, f := range fields {
			if !weather.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != weather.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Icon(); ok {
		_spec.SetField(weather.FieldIcon, field.TypeString, value)
	}
	if wuo.mutation.IconCleared() {
		_spec.ClearField(weather.FieldIcon, field.TypeString)
	}
	if value, ok := wuo.mutation.Time(); ok {
		_spec.SetField(weather.FieldTime, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedTime(); ok {
		_spec.AddField(weather.FieldTime, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.TimeEpoch(); ok {
		_spec.SetField(weather.FieldTimeEpoch, field.TypeTime, value)
	}
	if wuo.mutation.TimeEpochCleared() {
		_spec.ClearField(weather.FieldTimeEpoch, field.TypeTime)
	}
	if value, ok := wuo.mutation.Temp(); ok {
		_spec.SetField(weather.FieldTemp, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.AddedTemp(); ok {
		_spec.AddField(weather.FieldTemp, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.FeelsLike(); ok {
		_spec.SetField(weather.FieldFeelsLike, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.AddedFeelsLike(); ok {
		_spec.AddField(weather.FieldFeelsLike, field.TypeFloat64, value)
	}
	if wuo.mutation.ForcastCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weather.ForcastTable,
			Columns: []string{weather.ForcastColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forcast.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.ForcastIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weather.ForcastTable,
			Columns: []string{weather.ForcastColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forcast.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Weather{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weather.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
