// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"g_api/libs/weather-lib/ent/migrate"

	"g_api/libs/weather-lib/ent/forcast"
	"g_api/libs/weather-lib/ent/weather"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Forcast is the client for interacting with the Forcast builders.
	Forcast *ForcastClient
	// Weather is the client for interacting with the Weather builders.
	Weather *WeatherClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Forcast = NewForcastClient(c.config)
	c.Weather = NewWeatherClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Forcast: NewForcastClient(cfg),
		Weather: NewWeatherClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Forcast: NewForcastClient(cfg),
		Weather: NewWeatherClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Forcast.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Forcast.Use(hooks...)
	c.Weather.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Forcast.Intercept(interceptors...)
	c.Weather.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ForcastMutation:
		return c.Forcast.mutate(ctx, m)
	case *WeatherMutation:
		return c.Weather.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ForcastClient is a client for the Forcast schema.
type ForcastClient struct {
	config
}

// NewForcastClient returns a client for the Forcast from the given config.
func NewForcastClient(c config) *ForcastClient {
	return &ForcastClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `forcast.Hooks(f(g(h())))`.
func (c *ForcastClient) Use(hooks ...Hook) {
	c.hooks.Forcast = append(c.hooks.Forcast, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `forcast.Intercept(f(g(h())))`.
func (c *ForcastClient) Intercept(interceptors ...Interceptor) {
	c.inters.Forcast = append(c.inters.Forcast, interceptors...)
}

// Create returns a builder for creating a Forcast entity.
func (c *ForcastClient) Create() *ForcastCreate {
	mutation := newForcastMutation(c.config, OpCreate)
	return &ForcastCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Forcast entities.
func (c *ForcastClient) CreateBulk(builders ...*ForcastCreate) *ForcastCreateBulk {
	return &ForcastCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Forcast.
func (c *ForcastClient) Update() *ForcastUpdate {
	mutation := newForcastMutation(c.config, OpUpdate)
	return &ForcastUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ForcastClient) UpdateOne(f *Forcast) *ForcastUpdateOne {
	mutation := newForcastMutation(c.config, OpUpdateOne, withForcast(f))
	return &ForcastUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ForcastClient) UpdateOneID(id int) *ForcastUpdateOne {
	mutation := newForcastMutation(c.config, OpUpdateOne, withForcastID(id))
	return &ForcastUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Forcast.
func (c *ForcastClient) Delete() *ForcastDelete {
	mutation := newForcastMutation(c.config, OpDelete)
	return &ForcastDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ForcastClient) DeleteOne(f *Forcast) *ForcastDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ForcastClient) DeleteOneID(id int) *ForcastDeleteOne {
	builder := c.Delete().Where(forcast.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ForcastDeleteOne{builder}
}

// Query returns a query builder for Forcast.
func (c *ForcastClient) Query() *ForcastQuery {
	return &ForcastQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeForcast},
		inters: c.Interceptors(),
	}
}

// Get returns a Forcast entity by its id.
func (c *ForcastClient) Get(ctx context.Context, id int) (*Forcast, error) {
	return c.Query().Where(forcast.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ForcastClient) GetX(ctx context.Context, id int) *Forcast {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWeather queries the weather edge of a Forcast.
func (c *ForcastClient) QueryWeather(f *Forcast) *WeatherQuery {
	query := (&WeatherClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(forcast.Table, forcast.FieldID, id),
			sqlgraph.To(weather.Table, weather.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, forcast.WeatherTable, forcast.WeatherColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ForcastClient) Hooks() []Hook {
	return c.hooks.Forcast
}

// Interceptors returns the client interceptors.
func (c *ForcastClient) Interceptors() []Interceptor {
	return c.inters.Forcast
}

func (c *ForcastClient) mutate(ctx context.Context, m *ForcastMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ForcastCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ForcastUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ForcastUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ForcastDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Forcast mutation op: %q", m.Op())
	}
}

// WeatherClient is a client for the Weather schema.
type WeatherClient struct {
	config
}

// NewWeatherClient returns a client for the Weather from the given config.
func NewWeatherClient(c config) *WeatherClient {
	return &WeatherClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `weather.Hooks(f(g(h())))`.
func (c *WeatherClient) Use(hooks ...Hook) {
	c.hooks.Weather = append(c.hooks.Weather, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `weather.Intercept(f(g(h())))`.
func (c *WeatherClient) Intercept(interceptors ...Interceptor) {
	c.inters.Weather = append(c.inters.Weather, interceptors...)
}

// Create returns a builder for creating a Weather entity.
func (c *WeatherClient) Create() *WeatherCreate {
	mutation := newWeatherMutation(c.config, OpCreate)
	return &WeatherCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Weather entities.
func (c *WeatherClient) CreateBulk(builders ...*WeatherCreate) *WeatherCreateBulk {
	return &WeatherCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Weather.
func (c *WeatherClient) Update() *WeatherUpdate {
	mutation := newWeatherMutation(c.config, OpUpdate)
	return &WeatherUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WeatherClient) UpdateOne(w *Weather) *WeatherUpdateOne {
	mutation := newWeatherMutation(c.config, OpUpdateOne, withWeather(w))
	return &WeatherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WeatherClient) UpdateOneID(id int) *WeatherUpdateOne {
	mutation := newWeatherMutation(c.config, OpUpdateOne, withWeatherID(id))
	return &WeatherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Weather.
func (c *WeatherClient) Delete() *WeatherDelete {
	mutation := newWeatherMutation(c.config, OpDelete)
	return &WeatherDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WeatherClient) DeleteOne(w *Weather) *WeatherDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WeatherClient) DeleteOneID(id int) *WeatherDeleteOne {
	builder := c.Delete().Where(weather.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WeatherDeleteOne{builder}
}

// Query returns a query builder for Weather.
func (c *WeatherClient) Query() *WeatherQuery {
	return &WeatherQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWeather},
		inters: c.Interceptors(),
	}
}

// Get returns a Weather entity by its id.
func (c *WeatherClient) Get(ctx context.Context, id int) (*Weather, error) {
	return c.Query().Where(weather.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WeatherClient) GetX(ctx context.Context, id int) *Weather {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryForcast queries the forcast edge of a Weather.
func (c *WeatherClient) QueryForcast(w *Weather) *ForcastQuery {
	query := (&ForcastClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(weather.Table, weather.FieldID, id),
			sqlgraph.To(forcast.Table, forcast.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, weather.ForcastTable, weather.ForcastColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WeatherClient) Hooks() []Hook {
	return c.hooks.Weather
}

// Interceptors returns the client interceptors.
func (c *WeatherClient) Interceptors() []Interceptor {
	return c.inters.Weather
}

func (c *WeatherClient) mutate(ctx context.Context, m *WeatherMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WeatherCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WeatherUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WeatherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WeatherDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Weather mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Forcast, Weather []ent.Hook
	}
	inters struct {
		Forcast, Weather []ent.Interceptor
	}
)
