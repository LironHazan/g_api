// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"g_api/libs/weather-lib/ent/forecast"
	"g_api/libs/weather-lib/ent/predicate"
	"g_api/libs/weather-lib/ent/weather"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeForecast = "Forecast"
	TypeWeather  = "Weather"
)

// ForecastMutation represents an operation that mutates the Forecast nodes in the graph.
type ForecastMutation struct {
	config
	op             Op
	typ            string
	id             *int
	country        *string
	region         *string
	date           *time.Time
	localtime      *time.Time
	icon           *string
	temp           *float64
	addtemp        *float64
	clearedFields  map[string]struct{}
	weather        map[int]struct{}
	removedweather map[int]struct{}
	clearedweather bool
	done           bool
	oldValue       func(context.Context) (*Forecast, error)
	predicates     []predicate.Forecast
}

var _ ent.Mutation = (*ForecastMutation)(nil)

// forecastOption allows management of the mutation configuration using functional options.
type forecastOption func(*ForecastMutation)

// newForecastMutation creates new mutation for the Forecast entity.
func newForecastMutation(c config, op Op, opts ...forecastOption) *ForecastMutation {
	m := &ForecastMutation{
		config:        c,
		op:            op,
		typ:           TypeForecast,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withForecastID sets the ID field of the mutation.
func withForecastID(id int) forecastOption {
	return func(m *ForecastMutation) {
		var (
			err   error
			once  sync.Once
			value *Forecast
		)
		m.oldValue = func(ctx context.Context) (*Forecast, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Forecast.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withForecast sets the old Forecast of the mutation.
func withForecast(node *Forecast) forecastOption {
	return func(m *ForecastMutation) {
		m.oldValue = func(context.Context) (*Forecast, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ForecastMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ForecastMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ForecastMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ForecastMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Forecast.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCountry sets the "country" field.
func (m *ForecastMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *ForecastMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the Forecast entity.
// If the Forecast object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ForecastMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *ForecastMutation) ResetCountry() {
	m.country = nil
}

// SetRegion sets the "region" field.
func (m *ForecastMutation) SetRegion(s string) {
	m.region = &s
}

// Region returns the value of the "region" field in the mutation.
func (m *ForecastMutation) Region() (r string, exists bool) {
	v := m.region
	if v == nil {
		return
	}
	return *v, true
}

// OldRegion returns the old "region" field's value of the Forecast entity.
// If the Forecast object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ForecastMutation) OldRegion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegion: %w", err)
	}
	return oldValue.Region, nil
}

// ClearRegion clears the value of the "region" field.
func (m *ForecastMutation) ClearRegion() {
	m.region = nil
	m.clearedFields[forecast.FieldRegion] = struct{}{}
}

// RegionCleared returns if the "region" field was cleared in this mutation.
func (m *ForecastMutation) RegionCleared() bool {
	_, ok := m.clearedFields[forecast.FieldRegion]
	return ok
}

// ResetRegion resets all changes to the "region" field.
func (m *ForecastMutation) ResetRegion() {
	m.region = nil
	delete(m.clearedFields, forecast.FieldRegion)
}

// SetDate sets the "date" field.
func (m *ForecastMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *ForecastMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Forecast entity.
// If the Forecast object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ForecastMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *ForecastMutation) ResetDate() {
	m.date = nil
}

// SetLocaltime sets the "localtime" field.
func (m *ForecastMutation) SetLocaltime(t time.Time) {
	m.localtime = &t
}

// Localtime returns the value of the "localtime" field in the mutation.
func (m *ForecastMutation) Localtime() (r time.Time, exists bool) {
	v := m.localtime
	if v == nil {
		return
	}
	return *v, true
}

// OldLocaltime returns the old "localtime" field's value of the Forecast entity.
// If the Forecast object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ForecastMutation) OldLocaltime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocaltime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocaltime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocaltime: %w", err)
	}
	return oldValue.Localtime, nil
}

// ClearLocaltime clears the value of the "localtime" field.
func (m *ForecastMutation) ClearLocaltime() {
	m.localtime = nil
	m.clearedFields[forecast.FieldLocaltime] = struct{}{}
}

// LocaltimeCleared returns if the "localtime" field was cleared in this mutation.
func (m *ForecastMutation) LocaltimeCleared() bool {
	_, ok := m.clearedFields[forecast.FieldLocaltime]
	return ok
}

// ResetLocaltime resets all changes to the "localtime" field.
func (m *ForecastMutation) ResetLocaltime() {
	m.localtime = nil
	delete(m.clearedFields, forecast.FieldLocaltime)
}

// SetIcon sets the "icon" field.
func (m *ForecastMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *ForecastMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the Forecast entity.
// If the Forecast object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ForecastMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ClearIcon clears the value of the "icon" field.
func (m *ForecastMutation) ClearIcon() {
	m.icon = nil
	m.clearedFields[forecast.FieldIcon] = struct{}{}
}

// IconCleared returns if the "icon" field was cleared in this mutation.
func (m *ForecastMutation) IconCleared() bool {
	_, ok := m.clearedFields[forecast.FieldIcon]
	return ok
}

// ResetIcon resets all changes to the "icon" field.
func (m *ForecastMutation) ResetIcon() {
	m.icon = nil
	delete(m.clearedFields, forecast.FieldIcon)
}

// SetTemp sets the "temp" field.
func (m *ForecastMutation) SetTemp(f float64) {
	m.temp = &f
	m.addtemp = nil
}

// Temp returns the value of the "temp" field in the mutation.
func (m *ForecastMutation) Temp() (r float64, exists bool) {
	v := m.temp
	if v == nil {
		return
	}
	return *v, true
}

// OldTemp returns the old "temp" field's value of the Forecast entity.
// If the Forecast object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ForecastMutation) OldTemp(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTemp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTemp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTemp: %w", err)
	}
	return oldValue.Temp, nil
}

// AddTemp adds f to the "temp" field.
func (m *ForecastMutation) AddTemp(f float64) {
	if m.addtemp != nil {
		*m.addtemp += f
	} else {
		m.addtemp = &f
	}
}

// AddedTemp returns the value that was added to the "temp" field in this mutation.
func (m *ForecastMutation) AddedTemp() (r float64, exists bool) {
	v := m.addtemp
	if v == nil {
		return
	}
	return *v, true
}

// ResetTemp resets all changes to the "temp" field.
func (m *ForecastMutation) ResetTemp() {
	m.temp = nil
	m.addtemp = nil
}

// AddWeatherIDs adds the "weather" edge to the Weather entity by ids.
func (m *ForecastMutation) AddWeatherIDs(ids ...int) {
	if m.weather == nil {
		m.weather = make(map[int]struct{})
	}
	for i := range ids {
		m.weather[ids[i]] = struct{}{}
	}
}

// ClearWeather clears the "weather" edge to the Weather entity.
func (m *ForecastMutation) ClearWeather() {
	m.clearedweather = true
}

// WeatherCleared reports if the "weather" edge to the Weather entity was cleared.
func (m *ForecastMutation) WeatherCleared() bool {
	return m.clearedweather
}

// RemoveWeatherIDs removes the "weather" edge to the Weather entity by IDs.
func (m *ForecastMutation) RemoveWeatherIDs(ids ...int) {
	if m.removedweather == nil {
		m.removedweather = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.weather, ids[i])
		m.removedweather[ids[i]] = struct{}{}
	}
}

// RemovedWeather returns the removed IDs of the "weather" edge to the Weather entity.
func (m *ForecastMutation) RemovedWeatherIDs() (ids []int) {
	for id := range m.removedweather {
		ids = append(ids, id)
	}
	return
}

// WeatherIDs returns the "weather" edge IDs in the mutation.
func (m *ForecastMutation) WeatherIDs() (ids []int) {
	for id := range m.weather {
		ids = append(ids, id)
	}
	return
}

// ResetWeather resets all changes to the "weather" edge.
func (m *ForecastMutation) ResetWeather() {
	m.weather = nil
	m.clearedweather = false
	m.removedweather = nil
}

// Where appends a list predicates to the ForecastMutation builder.
func (m *ForecastMutation) Where(ps ...predicate.Forecast) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ForecastMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ForecastMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Forecast, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ForecastMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ForecastMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Forecast).
func (m *ForecastMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ForecastMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.country != nil {
		fields = append(fields, forecast.FieldCountry)
	}
	if m.region != nil {
		fields = append(fields, forecast.FieldRegion)
	}
	if m.date != nil {
		fields = append(fields, forecast.FieldDate)
	}
	if m.localtime != nil {
		fields = append(fields, forecast.FieldLocaltime)
	}
	if m.icon != nil {
		fields = append(fields, forecast.FieldIcon)
	}
	if m.temp != nil {
		fields = append(fields, forecast.FieldTemp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ForecastMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case forecast.FieldCountry:
		return m.Country()
	case forecast.FieldRegion:
		return m.Region()
	case forecast.FieldDate:
		return m.Date()
	case forecast.FieldLocaltime:
		return m.Localtime()
	case forecast.FieldIcon:
		return m.Icon()
	case forecast.FieldTemp:
		return m.Temp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ForecastMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case forecast.FieldCountry:
		return m.OldCountry(ctx)
	case forecast.FieldRegion:
		return m.OldRegion(ctx)
	case forecast.FieldDate:
		return m.OldDate(ctx)
	case forecast.FieldLocaltime:
		return m.OldLocaltime(ctx)
	case forecast.FieldIcon:
		return m.OldIcon(ctx)
	case forecast.FieldTemp:
		return m.OldTemp(ctx)
	}
	return nil, fmt.Errorf("unknown Forecast field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ForecastMutation) SetField(name string, value ent.Value) error {
	switch name {
	case forecast.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case forecast.FieldRegion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegion(v)
		return nil
	case forecast.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case forecast.FieldLocaltime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocaltime(v)
		return nil
	case forecast.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case forecast.FieldTemp:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTemp(v)
		return nil
	}
	return fmt.Errorf("unknown Forecast field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ForecastMutation) AddedFields() []string {
	var fields []string
	if m.addtemp != nil {
		fields = append(fields, forecast.FieldTemp)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ForecastMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case forecast.FieldTemp:
		return m.AddedTemp()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ForecastMutation) AddField(name string, value ent.Value) error {
	switch name {
	case forecast.FieldTemp:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTemp(v)
		return nil
	}
	return fmt.Errorf("unknown Forecast numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ForecastMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(forecast.FieldRegion) {
		fields = append(fields, forecast.FieldRegion)
	}
	if m.FieldCleared(forecast.FieldLocaltime) {
		fields = append(fields, forecast.FieldLocaltime)
	}
	if m.FieldCleared(forecast.FieldIcon) {
		fields = append(fields, forecast.FieldIcon)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ForecastMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ForecastMutation) ClearField(name string) error {
	switch name {
	case forecast.FieldRegion:
		m.ClearRegion()
		return nil
	case forecast.FieldLocaltime:
		m.ClearLocaltime()
		return nil
	case forecast.FieldIcon:
		m.ClearIcon()
		return nil
	}
	return fmt.Errorf("unknown Forecast nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ForecastMutation) ResetField(name string) error {
	switch name {
	case forecast.FieldCountry:
		m.ResetCountry()
		return nil
	case forecast.FieldRegion:
		m.ResetRegion()
		return nil
	case forecast.FieldDate:
		m.ResetDate()
		return nil
	case forecast.FieldLocaltime:
		m.ResetLocaltime()
		return nil
	case forecast.FieldIcon:
		m.ResetIcon()
		return nil
	case forecast.FieldTemp:
		m.ResetTemp()
		return nil
	}
	return fmt.Errorf("unknown Forecast field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ForecastMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.weather != nil {
		edges = append(edges, forecast.EdgeWeather)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ForecastMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case forecast.EdgeWeather:
		ids := make([]ent.Value, 0, len(m.weather))
		for id := range m.weather {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ForecastMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedweather != nil {
		edges = append(edges, forecast.EdgeWeather)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ForecastMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case forecast.EdgeWeather:
		ids := make([]ent.Value, 0, len(m.removedweather))
		for id := range m.removedweather {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ForecastMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedweather {
		edges = append(edges, forecast.EdgeWeather)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ForecastMutation) EdgeCleared(name string) bool {
	switch name {
	case forecast.EdgeWeather:
		return m.clearedweather
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ForecastMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Forecast unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ForecastMutation) ResetEdge(name string) error {
	switch name {
	case forecast.EdgeWeather:
		m.ResetWeather()
		return nil
	}
	return fmt.Errorf("unknown Forecast edge %s", name)
}

// WeatherMutation represents an operation that mutates the Weather nodes in the graph.
type WeatherMutation struct {
	config
	op              Op
	typ             string
	id              *int
	icon            *string
	date            *time.Time
	time            *int
	addtime         *int
	time_epoch      *time.Time
	temp            *float64
	addtemp         *float64
	feels_like      *float64
	addfeels_like   *float64
	clearedFields   map[string]struct{}
	forecast        *int
	clearedforecast bool
	done            bool
	oldValue        func(context.Context) (*Weather, error)
	predicates      []predicate.Weather
}

var _ ent.Mutation = (*WeatherMutation)(nil)

// weatherOption allows management of the mutation configuration using functional options.
type weatherOption func(*WeatherMutation)

// newWeatherMutation creates new mutation for the Weather entity.
func newWeatherMutation(c config, op Op, opts ...weatherOption) *WeatherMutation {
	m := &WeatherMutation{
		config:        c,
		op:            op,
		typ:           TypeWeather,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWeatherID sets the ID field of the mutation.
func withWeatherID(id int) weatherOption {
	return func(m *WeatherMutation) {
		var (
			err   error
			once  sync.Once
			value *Weather
		)
		m.oldValue = func(ctx context.Context) (*Weather, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Weather.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWeather sets the old Weather of the mutation.
func withWeather(node *Weather) weatherOption {
	return func(m *WeatherMutation) {
		m.oldValue = func(context.Context) (*Weather, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WeatherMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WeatherMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WeatherMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WeatherMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Weather.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIcon sets the "icon" field.
func (m *WeatherMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *WeatherMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the Weather entity.
// If the Weather object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeatherMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ClearIcon clears the value of the "icon" field.
func (m *WeatherMutation) ClearIcon() {
	m.icon = nil
	m.clearedFields[weather.FieldIcon] = struct{}{}
}

// IconCleared returns if the "icon" field was cleared in this mutation.
func (m *WeatherMutation) IconCleared() bool {
	_, ok := m.clearedFields[weather.FieldIcon]
	return ok
}

// ResetIcon resets all changes to the "icon" field.
func (m *WeatherMutation) ResetIcon() {
	m.icon = nil
	delete(m.clearedFields, weather.FieldIcon)
}

// SetDate sets the "date" field.
func (m *WeatherMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *WeatherMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Weather entity.
// If the Weather object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeatherMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *WeatherMutation) ResetDate() {
	m.date = nil
}

// SetTime sets the "time" field.
func (m *WeatherMutation) SetTime(i int) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *WeatherMutation) Time() (r int, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Weather entity.
// If the Weather object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeatherMutation) OldTime(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *WeatherMutation) AddTime(i int) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *WeatherMutation) AddedTime() (r int, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *WeatherMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetTimeEpoch sets the "time_epoch" field.
func (m *WeatherMutation) SetTimeEpoch(t time.Time) {
	m.time_epoch = &t
}

// TimeEpoch returns the value of the "time_epoch" field in the mutation.
func (m *WeatherMutation) TimeEpoch() (r time.Time, exists bool) {
	v := m.time_epoch
	if v == nil {
		return
	}
	return *v, true
}

// OldTimeEpoch returns the old "time_epoch" field's value of the Weather entity.
// If the Weather object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeatherMutation) OldTimeEpoch(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimeEpoch is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimeEpoch requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimeEpoch: %w", err)
	}
	return oldValue.TimeEpoch, nil
}

// ClearTimeEpoch clears the value of the "time_epoch" field.
func (m *WeatherMutation) ClearTimeEpoch() {
	m.time_epoch = nil
	m.clearedFields[weather.FieldTimeEpoch] = struct{}{}
}

// TimeEpochCleared returns if the "time_epoch" field was cleared in this mutation.
func (m *WeatherMutation) TimeEpochCleared() bool {
	_, ok := m.clearedFields[weather.FieldTimeEpoch]
	return ok
}

// ResetTimeEpoch resets all changes to the "time_epoch" field.
func (m *WeatherMutation) ResetTimeEpoch() {
	m.time_epoch = nil
	delete(m.clearedFields, weather.FieldTimeEpoch)
}

// SetTemp sets the "temp" field.
func (m *WeatherMutation) SetTemp(f float64) {
	m.temp = &f
	m.addtemp = nil
}

// Temp returns the value of the "temp" field in the mutation.
func (m *WeatherMutation) Temp() (r float64, exists bool) {
	v := m.temp
	if v == nil {
		return
	}
	return *v, true
}

// OldTemp returns the old "temp" field's value of the Weather entity.
// If the Weather object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeatherMutation) OldTemp(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTemp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTemp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTemp: %w", err)
	}
	return oldValue.Temp, nil
}

// AddTemp adds f to the "temp" field.
func (m *WeatherMutation) AddTemp(f float64) {
	if m.addtemp != nil {
		*m.addtemp += f
	} else {
		m.addtemp = &f
	}
}

// AddedTemp returns the value that was added to the "temp" field in this mutation.
func (m *WeatherMutation) AddedTemp() (r float64, exists bool) {
	v := m.addtemp
	if v == nil {
		return
	}
	return *v, true
}

// ResetTemp resets all changes to the "temp" field.
func (m *WeatherMutation) ResetTemp() {
	m.temp = nil
	m.addtemp = nil
}

// SetFeelsLike sets the "feels_like" field.
func (m *WeatherMutation) SetFeelsLike(f float64) {
	m.feels_like = &f
	m.addfeels_like = nil
}

// FeelsLike returns the value of the "feels_like" field in the mutation.
func (m *WeatherMutation) FeelsLike() (r float64, exists bool) {
	v := m.feels_like
	if v == nil {
		return
	}
	return *v, true
}

// OldFeelsLike returns the old "feels_like" field's value of the Weather entity.
// If the Weather object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeatherMutation) OldFeelsLike(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeelsLike is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeelsLike requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeelsLike: %w", err)
	}
	return oldValue.FeelsLike, nil
}

// AddFeelsLike adds f to the "feels_like" field.
func (m *WeatherMutation) AddFeelsLike(f float64) {
	if m.addfeels_like != nil {
		*m.addfeels_like += f
	} else {
		m.addfeels_like = &f
	}
}

// AddedFeelsLike returns the value that was added to the "feels_like" field in this mutation.
func (m *WeatherMutation) AddedFeelsLike() (r float64, exists bool) {
	v := m.addfeels_like
	if v == nil {
		return
	}
	return *v, true
}

// ResetFeelsLike resets all changes to the "feels_like" field.
func (m *WeatherMutation) ResetFeelsLike() {
	m.feels_like = nil
	m.addfeels_like = nil
}

// SetForecastID sets the "forecast" edge to the Forecast entity by id.
func (m *WeatherMutation) SetForecastID(id int) {
	m.forecast = &id
}

// ClearForecast clears the "forecast" edge to the Forecast entity.
func (m *WeatherMutation) ClearForecast() {
	m.clearedforecast = true
}

// ForecastCleared reports if the "forecast" edge to the Forecast entity was cleared.
func (m *WeatherMutation) ForecastCleared() bool {
	return m.clearedforecast
}

// ForecastID returns the "forecast" edge ID in the mutation.
func (m *WeatherMutation) ForecastID() (id int, exists bool) {
	if m.forecast != nil {
		return *m.forecast, true
	}
	return
}

// ForecastIDs returns the "forecast" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ForecastID instead. It exists only for internal usage by the builders.
func (m *WeatherMutation) ForecastIDs() (ids []int) {
	if id := m.forecast; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetForecast resets all changes to the "forecast" edge.
func (m *WeatherMutation) ResetForecast() {
	m.forecast = nil
	m.clearedforecast = false
}

// Where appends a list predicates to the WeatherMutation builder.
func (m *WeatherMutation) Where(ps ...predicate.Weather) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WeatherMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WeatherMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Weather, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WeatherMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WeatherMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Weather).
func (m *WeatherMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WeatherMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.icon != nil {
		fields = append(fields, weather.FieldIcon)
	}
	if m.date != nil {
		fields = append(fields, weather.FieldDate)
	}
	if m.time != nil {
		fields = append(fields, weather.FieldTime)
	}
	if m.time_epoch != nil {
		fields = append(fields, weather.FieldTimeEpoch)
	}
	if m.temp != nil {
		fields = append(fields, weather.FieldTemp)
	}
	if m.feels_like != nil {
		fields = append(fields, weather.FieldFeelsLike)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WeatherMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case weather.FieldIcon:
		return m.Icon()
	case weather.FieldDate:
		return m.Date()
	case weather.FieldTime:
		return m.Time()
	case weather.FieldTimeEpoch:
		return m.TimeEpoch()
	case weather.FieldTemp:
		return m.Temp()
	case weather.FieldFeelsLike:
		return m.FeelsLike()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WeatherMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case weather.FieldIcon:
		return m.OldIcon(ctx)
	case weather.FieldDate:
		return m.OldDate(ctx)
	case weather.FieldTime:
		return m.OldTime(ctx)
	case weather.FieldTimeEpoch:
		return m.OldTimeEpoch(ctx)
	case weather.FieldTemp:
		return m.OldTemp(ctx)
	case weather.FieldFeelsLike:
		return m.OldFeelsLike(ctx)
	}
	return nil, fmt.Errorf("unknown Weather field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeatherMutation) SetField(name string, value ent.Value) error {
	switch name {
	case weather.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case weather.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case weather.FieldTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case weather.FieldTimeEpoch:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimeEpoch(v)
		return nil
	case weather.FieldTemp:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTemp(v)
		return nil
	case weather.FieldFeelsLike:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeelsLike(v)
		return nil
	}
	return fmt.Errorf("unknown Weather field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WeatherMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, weather.FieldTime)
	}
	if m.addtemp != nil {
		fields = append(fields, weather.FieldTemp)
	}
	if m.addfeels_like != nil {
		fields = append(fields, weather.FieldFeelsLike)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WeatherMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case weather.FieldTime:
		return m.AddedTime()
	case weather.FieldTemp:
		return m.AddedTemp()
	case weather.FieldFeelsLike:
		return m.AddedFeelsLike()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeatherMutation) AddField(name string, value ent.Value) error {
	switch name {
	case weather.FieldTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	case weather.FieldTemp:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTemp(v)
		return nil
	case weather.FieldFeelsLike:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFeelsLike(v)
		return nil
	}
	return fmt.Errorf("unknown Weather numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WeatherMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(weather.FieldIcon) {
		fields = append(fields, weather.FieldIcon)
	}
	if m.FieldCleared(weather.FieldTimeEpoch) {
		fields = append(fields, weather.FieldTimeEpoch)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WeatherMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WeatherMutation) ClearField(name string) error {
	switch name {
	case weather.FieldIcon:
		m.ClearIcon()
		return nil
	case weather.FieldTimeEpoch:
		m.ClearTimeEpoch()
		return nil
	}
	return fmt.Errorf("unknown Weather nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WeatherMutation) ResetField(name string) error {
	switch name {
	case weather.FieldIcon:
		m.ResetIcon()
		return nil
	case weather.FieldDate:
		m.ResetDate()
		return nil
	case weather.FieldTime:
		m.ResetTime()
		return nil
	case weather.FieldTimeEpoch:
		m.ResetTimeEpoch()
		return nil
	case weather.FieldTemp:
		m.ResetTemp()
		return nil
	case weather.FieldFeelsLike:
		m.ResetFeelsLike()
		return nil
	}
	return fmt.Errorf("unknown Weather field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WeatherMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.forecast != nil {
		edges = append(edges, weather.EdgeForecast)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WeatherMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case weather.EdgeForecast:
		if id := m.forecast; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WeatherMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WeatherMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WeatherMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedforecast {
		edges = append(edges, weather.EdgeForecast)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WeatherMutation) EdgeCleared(name string) bool {
	switch name {
	case weather.EdgeForecast:
		return m.clearedforecast
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WeatherMutation) ClearEdge(name string) error {
	switch name {
	case weather.EdgeForecast:
		m.ClearForecast()
		return nil
	}
	return fmt.Errorf("unknown Weather unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WeatherMutation) ResetEdge(name string) error {
	switch name {
	case weather.EdgeForecast:
		m.ResetForecast()
		return nil
	}
	return fmt.Errorf("unknown Weather edge %s", name)
}
