// Code generated by ent, DO NOT EDIT.

package weather

import (
	"g_api/libs/weather-lib/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Weather {
	return predicate.Weather(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Weather {
	return predicate.Weather(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Weather {
	return predicate.Weather(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Weather {
	return predicate.Weather(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Weather {
	return predicate.Weather(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Weather {
	return predicate.Weather(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Weather {
	return predicate.Weather(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Weather {
	return predicate.Weather(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Weather {
	return predicate.Weather(sql.FieldLTE(FieldID, id))
}

// Icon applies equality check predicate on the "icon" field. It's identical to IconEQ.
func Icon(v string) predicate.Weather {
	return predicate.Weather(sql.FieldEQ(FieldIcon, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v int) predicate.Weather {
	return predicate.Weather(sql.FieldEQ(FieldTime, v))
}

// TimeEpoch applies equality check predicate on the "time_epoch" field. It's identical to TimeEpochEQ.
func TimeEpoch(v time.Time) predicate.Weather {
	return predicate.Weather(sql.FieldEQ(FieldTimeEpoch, v))
}

// Temp applies equality check predicate on the "temp" field. It's identical to TempEQ.
func Temp(v float64) predicate.Weather {
	return predicate.Weather(sql.FieldEQ(FieldTemp, v))
}

// FeelsLike applies equality check predicate on the "feels_like" field. It's identical to FeelsLikeEQ.
func FeelsLike(v float64) predicate.Weather {
	return predicate.Weather(sql.FieldEQ(FieldFeelsLike, v))
}

// IconEQ applies the EQ predicate on the "icon" field.
func IconEQ(v string) predicate.Weather {
	return predicate.Weather(sql.FieldEQ(FieldIcon, v))
}

// IconNEQ applies the NEQ predicate on the "icon" field.
func IconNEQ(v string) predicate.Weather {
	return predicate.Weather(sql.FieldNEQ(FieldIcon, v))
}

// IconIn applies the In predicate on the "icon" field.
func IconIn(vs ...string) predicate.Weather {
	return predicate.Weather(sql.FieldIn(FieldIcon, vs...))
}

// IconNotIn applies the NotIn predicate on the "icon" field.
func IconNotIn(vs ...string) predicate.Weather {
	return predicate.Weather(sql.FieldNotIn(FieldIcon, vs...))
}

// IconGT applies the GT predicate on the "icon" field.
func IconGT(v string) predicate.Weather {
	return predicate.Weather(sql.FieldGT(FieldIcon, v))
}

// IconGTE applies the GTE predicate on the "icon" field.
func IconGTE(v string) predicate.Weather {
	return predicate.Weather(sql.FieldGTE(FieldIcon, v))
}

// IconLT applies the LT predicate on the "icon" field.
func IconLT(v string) predicate.Weather {
	return predicate.Weather(sql.FieldLT(FieldIcon, v))
}

// IconLTE applies the LTE predicate on the "icon" field.
func IconLTE(v string) predicate.Weather {
	return predicate.Weather(sql.FieldLTE(FieldIcon, v))
}

// IconContains applies the Contains predicate on the "icon" field.
func IconContains(v string) predicate.Weather {
	return predicate.Weather(sql.FieldContains(FieldIcon, v))
}

// IconHasPrefix applies the HasPrefix predicate on the "icon" field.
func IconHasPrefix(v string) predicate.Weather {
	return predicate.Weather(sql.FieldHasPrefix(FieldIcon, v))
}

// IconHasSuffix applies the HasSuffix predicate on the "icon" field.
func IconHasSuffix(v string) predicate.Weather {
	return predicate.Weather(sql.FieldHasSuffix(FieldIcon, v))
}

// IconIsNil applies the IsNil predicate on the "icon" field.
func IconIsNil() predicate.Weather {
	return predicate.Weather(sql.FieldIsNull(FieldIcon))
}

// IconNotNil applies the NotNil predicate on the "icon" field.
func IconNotNil() predicate.Weather {
	return predicate.Weather(sql.FieldNotNull(FieldIcon))
}

// IconEqualFold applies the EqualFold predicate on the "icon" field.
func IconEqualFold(v string) predicate.Weather {
	return predicate.Weather(sql.FieldEqualFold(FieldIcon, v))
}

// IconContainsFold applies the ContainsFold predicate on the "icon" field.
func IconContainsFold(v string) predicate.Weather {
	return predicate.Weather(sql.FieldContainsFold(FieldIcon, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v int) predicate.Weather {
	return predicate.Weather(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v int) predicate.Weather {
	return predicate.Weather(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...int) predicate.Weather {
	return predicate.Weather(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...int) predicate.Weather {
	return predicate.Weather(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v int) predicate.Weather {
	return predicate.Weather(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v int) predicate.Weather {
	return predicate.Weather(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v int) predicate.Weather {
	return predicate.Weather(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v int) predicate.Weather {
	return predicate.Weather(sql.FieldLTE(FieldTime, v))
}

// TimeEpochEQ applies the EQ predicate on the "time_epoch" field.
func TimeEpochEQ(v time.Time) predicate.Weather {
	return predicate.Weather(sql.FieldEQ(FieldTimeEpoch, v))
}

// TimeEpochNEQ applies the NEQ predicate on the "time_epoch" field.
func TimeEpochNEQ(v time.Time) predicate.Weather {
	return predicate.Weather(sql.FieldNEQ(FieldTimeEpoch, v))
}

// TimeEpochIn applies the In predicate on the "time_epoch" field.
func TimeEpochIn(vs ...time.Time) predicate.Weather {
	return predicate.Weather(sql.FieldIn(FieldTimeEpoch, vs...))
}

// TimeEpochNotIn applies the NotIn predicate on the "time_epoch" field.
func TimeEpochNotIn(vs ...time.Time) predicate.Weather {
	return predicate.Weather(sql.FieldNotIn(FieldTimeEpoch, vs...))
}

// TimeEpochGT applies the GT predicate on the "time_epoch" field.
func TimeEpochGT(v time.Time) predicate.Weather {
	return predicate.Weather(sql.FieldGT(FieldTimeEpoch, v))
}

// TimeEpochGTE applies the GTE predicate on the "time_epoch" field.
func TimeEpochGTE(v time.Time) predicate.Weather {
	return predicate.Weather(sql.FieldGTE(FieldTimeEpoch, v))
}

// TimeEpochLT applies the LT predicate on the "time_epoch" field.
func TimeEpochLT(v time.Time) predicate.Weather {
	return predicate.Weather(sql.FieldLT(FieldTimeEpoch, v))
}

// TimeEpochLTE applies the LTE predicate on the "time_epoch" field.
func TimeEpochLTE(v time.Time) predicate.Weather {
	return predicate.Weather(sql.FieldLTE(FieldTimeEpoch, v))
}

// TimeEpochIsNil applies the IsNil predicate on the "time_epoch" field.
func TimeEpochIsNil() predicate.Weather {
	return predicate.Weather(sql.FieldIsNull(FieldTimeEpoch))
}

// TimeEpochNotNil applies the NotNil predicate on the "time_epoch" field.
func TimeEpochNotNil() predicate.Weather {
	return predicate.Weather(sql.FieldNotNull(FieldTimeEpoch))
}

// TempEQ applies the EQ predicate on the "temp" field.
func TempEQ(v float64) predicate.Weather {
	return predicate.Weather(sql.FieldEQ(FieldTemp, v))
}

// TempNEQ applies the NEQ predicate on the "temp" field.
func TempNEQ(v float64) predicate.Weather {
	return predicate.Weather(sql.FieldNEQ(FieldTemp, v))
}

// TempIn applies the In predicate on the "temp" field.
func TempIn(vs ...float64) predicate.Weather {
	return predicate.Weather(sql.FieldIn(FieldTemp, vs...))
}

// TempNotIn applies the NotIn predicate on the "temp" field.
func TempNotIn(vs ...float64) predicate.Weather {
	return predicate.Weather(sql.FieldNotIn(FieldTemp, vs...))
}

// TempGT applies the GT predicate on the "temp" field.
func TempGT(v float64) predicate.Weather {
	return predicate.Weather(sql.FieldGT(FieldTemp, v))
}

// TempGTE applies the GTE predicate on the "temp" field.
func TempGTE(v float64) predicate.Weather {
	return predicate.Weather(sql.FieldGTE(FieldTemp, v))
}

// TempLT applies the LT predicate on the "temp" field.
func TempLT(v float64) predicate.Weather {
	return predicate.Weather(sql.FieldLT(FieldTemp, v))
}

// TempLTE applies the LTE predicate on the "temp" field.
func TempLTE(v float64) predicate.Weather {
	return predicate.Weather(sql.FieldLTE(FieldTemp, v))
}

// FeelsLikeEQ applies the EQ predicate on the "feels_like" field.
func FeelsLikeEQ(v float64) predicate.Weather {
	return predicate.Weather(sql.FieldEQ(FieldFeelsLike, v))
}

// FeelsLikeNEQ applies the NEQ predicate on the "feels_like" field.
func FeelsLikeNEQ(v float64) predicate.Weather {
	return predicate.Weather(sql.FieldNEQ(FieldFeelsLike, v))
}

// FeelsLikeIn applies the In predicate on the "feels_like" field.
func FeelsLikeIn(vs ...float64) predicate.Weather {
	return predicate.Weather(sql.FieldIn(FieldFeelsLike, vs...))
}

// FeelsLikeNotIn applies the NotIn predicate on the "feels_like" field.
func FeelsLikeNotIn(vs ...float64) predicate.Weather {
	return predicate.Weather(sql.FieldNotIn(FieldFeelsLike, vs...))
}

// FeelsLikeGT applies the GT predicate on the "feels_like" field.
func FeelsLikeGT(v float64) predicate.Weather {
	return predicate.Weather(sql.FieldGT(FieldFeelsLike, v))
}

// FeelsLikeGTE applies the GTE predicate on the "feels_like" field.
func FeelsLikeGTE(v float64) predicate.Weather {
	return predicate.Weather(sql.FieldGTE(FieldFeelsLike, v))
}

// FeelsLikeLT applies the LT predicate on the "feels_like" field.
func FeelsLikeLT(v float64) predicate.Weather {
	return predicate.Weather(sql.FieldLT(FieldFeelsLike, v))
}

// FeelsLikeLTE applies the LTE predicate on the "feels_like" field.
func FeelsLikeLTE(v float64) predicate.Weather {
	return predicate.Weather(sql.FieldLTE(FieldFeelsLike, v))
}

// HasForcast applies the HasEdge predicate on the "forcast" edge.
func HasForcast() predicate.Weather {
	return predicate.Weather(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ForcastTable, ForcastColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasForcastWith applies the HasEdge predicate on the "forcast" edge with a given conditions (other predicates).
func HasForcastWith(preds ...predicate.Forecast) predicate.Weather {
	return predicate.Weather(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ForcastInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ForcastTable, ForcastColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Weather) predicate.Weather {
	return predicate.Weather(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Weather) predicate.Weather {
	return predicate.Weather(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Weather) predicate.Weather {
	return predicate.Weather(func(s *sql.Selector) {
		p(s.Not())
	})
}
