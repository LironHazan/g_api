// Code generated by ent, DO NOT EDIT.

package forcast

import (
	"g_api/libs/weather-lib/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Forcast {
	return predicate.Forcast(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Forcast {
	return predicate.Forcast(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Forcast {
	return predicate.Forcast(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Forcast {
	return predicate.Forcast(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Forcast {
	return predicate.Forcast(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Forcast {
	return predicate.Forcast(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Forcast {
	return predicate.Forcast(sql.FieldLTE(FieldID, id))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldCountry, v))
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldRegion, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldDate, v))
}

// Localtime applies equality check predicate on the "localtime" field. It's identical to LocaltimeEQ.
func Localtime(v time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldLocaltime, v))
}

// Icon applies equality check predicate on the "icon" field. It's identical to IconEQ.
func Icon(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldIcon, v))
}

// MaxTemp applies equality check predicate on the "max_temp" field. It's identical to MaxTempEQ.
func MaxTemp(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldMaxTemp, v))
}

// MinTemp applies equality check predicate on the "min_temp" field. It's identical to MinTempEQ.
func MinTemp(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldMinTemp, v))
}

// AvgTemp applies equality check predicate on the "avg_temp" field. It's identical to AvgTempEQ.
func AvgTemp(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldAvgTemp, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Forcast {
	return predicate.Forcast(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Forcast {
	return predicate.Forcast(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldContainsFold(FieldCountry, v))
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldRegion, v))
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldNEQ(FieldRegion, v))
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.Forcast {
	return predicate.Forcast(sql.FieldIn(FieldRegion, vs...))
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.Forcast {
	return predicate.Forcast(sql.FieldNotIn(FieldRegion, vs...))
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldGT(FieldRegion, v))
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldGTE(FieldRegion, v))
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldLT(FieldRegion, v))
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldLTE(FieldRegion, v))
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldContains(FieldRegion, v))
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldHasPrefix(FieldRegion, v))
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldHasSuffix(FieldRegion, v))
}

// RegionIsNil applies the IsNil predicate on the "region" field.
func RegionIsNil() predicate.Forcast {
	return predicate.Forcast(sql.FieldIsNull(FieldRegion))
}

// RegionNotNil applies the NotNil predicate on the "region" field.
func RegionNotNil() predicate.Forcast {
	return predicate.Forcast(sql.FieldNotNull(FieldRegion))
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldEqualFold(FieldRegion, v))
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldContainsFold(FieldRegion, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldLTE(FieldDate, v))
}

// LocaltimeEQ applies the EQ predicate on the "localtime" field.
func LocaltimeEQ(v time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldLocaltime, v))
}

// LocaltimeNEQ applies the NEQ predicate on the "localtime" field.
func LocaltimeNEQ(v time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldNEQ(FieldLocaltime, v))
}

// LocaltimeIn applies the In predicate on the "localtime" field.
func LocaltimeIn(vs ...time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldIn(FieldLocaltime, vs...))
}

// LocaltimeNotIn applies the NotIn predicate on the "localtime" field.
func LocaltimeNotIn(vs ...time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldNotIn(FieldLocaltime, vs...))
}

// LocaltimeGT applies the GT predicate on the "localtime" field.
func LocaltimeGT(v time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldGT(FieldLocaltime, v))
}

// LocaltimeGTE applies the GTE predicate on the "localtime" field.
func LocaltimeGTE(v time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldGTE(FieldLocaltime, v))
}

// LocaltimeLT applies the LT predicate on the "localtime" field.
func LocaltimeLT(v time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldLT(FieldLocaltime, v))
}

// LocaltimeLTE applies the LTE predicate on the "localtime" field.
func LocaltimeLTE(v time.Time) predicate.Forcast {
	return predicate.Forcast(sql.FieldLTE(FieldLocaltime, v))
}

// LocaltimeIsNil applies the IsNil predicate on the "localtime" field.
func LocaltimeIsNil() predicate.Forcast {
	return predicate.Forcast(sql.FieldIsNull(FieldLocaltime))
}

// LocaltimeNotNil applies the NotNil predicate on the "localtime" field.
func LocaltimeNotNil() predicate.Forcast {
	return predicate.Forcast(sql.FieldNotNull(FieldLocaltime))
}

// IconEQ applies the EQ predicate on the "icon" field.
func IconEQ(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldIcon, v))
}

// IconNEQ applies the NEQ predicate on the "icon" field.
func IconNEQ(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldNEQ(FieldIcon, v))
}

// IconIn applies the In predicate on the "icon" field.
func IconIn(vs ...string) predicate.Forcast {
	return predicate.Forcast(sql.FieldIn(FieldIcon, vs...))
}

// IconNotIn applies the NotIn predicate on the "icon" field.
func IconNotIn(vs ...string) predicate.Forcast {
	return predicate.Forcast(sql.FieldNotIn(FieldIcon, vs...))
}

// IconGT applies the GT predicate on the "icon" field.
func IconGT(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldGT(FieldIcon, v))
}

// IconGTE applies the GTE predicate on the "icon" field.
func IconGTE(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldGTE(FieldIcon, v))
}

// IconLT applies the LT predicate on the "icon" field.
func IconLT(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldLT(FieldIcon, v))
}

// IconLTE applies the LTE predicate on the "icon" field.
func IconLTE(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldLTE(FieldIcon, v))
}

// IconContains applies the Contains predicate on the "icon" field.
func IconContains(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldContains(FieldIcon, v))
}

// IconHasPrefix applies the HasPrefix predicate on the "icon" field.
func IconHasPrefix(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldHasPrefix(FieldIcon, v))
}

// IconHasSuffix applies the HasSuffix predicate on the "icon" field.
func IconHasSuffix(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldHasSuffix(FieldIcon, v))
}

// IconIsNil applies the IsNil predicate on the "icon" field.
func IconIsNil() predicate.Forcast {
	return predicate.Forcast(sql.FieldIsNull(FieldIcon))
}

// IconNotNil applies the NotNil predicate on the "icon" field.
func IconNotNil() predicate.Forcast {
	return predicate.Forcast(sql.FieldNotNull(FieldIcon))
}

// IconEqualFold applies the EqualFold predicate on the "icon" field.
func IconEqualFold(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldEqualFold(FieldIcon, v))
}

// IconContainsFold applies the ContainsFold predicate on the "icon" field.
func IconContainsFold(v string) predicate.Forcast {
	return predicate.Forcast(sql.FieldContainsFold(FieldIcon, v))
}

// MaxTempEQ applies the EQ predicate on the "max_temp" field.
func MaxTempEQ(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldMaxTemp, v))
}

// MaxTempNEQ applies the NEQ predicate on the "max_temp" field.
func MaxTempNEQ(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldNEQ(FieldMaxTemp, v))
}

// MaxTempIn applies the In predicate on the "max_temp" field.
func MaxTempIn(vs ...float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldIn(FieldMaxTemp, vs...))
}

// MaxTempNotIn applies the NotIn predicate on the "max_temp" field.
func MaxTempNotIn(vs ...float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldNotIn(FieldMaxTemp, vs...))
}

// MaxTempGT applies the GT predicate on the "max_temp" field.
func MaxTempGT(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldGT(FieldMaxTemp, v))
}

// MaxTempGTE applies the GTE predicate on the "max_temp" field.
func MaxTempGTE(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldGTE(FieldMaxTemp, v))
}

// MaxTempLT applies the LT predicate on the "max_temp" field.
func MaxTempLT(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldLT(FieldMaxTemp, v))
}

// MaxTempLTE applies the LTE predicate on the "max_temp" field.
func MaxTempLTE(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldLTE(FieldMaxTemp, v))
}

// MinTempEQ applies the EQ predicate on the "min_temp" field.
func MinTempEQ(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldMinTemp, v))
}

// MinTempNEQ applies the NEQ predicate on the "min_temp" field.
func MinTempNEQ(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldNEQ(FieldMinTemp, v))
}

// MinTempIn applies the In predicate on the "min_temp" field.
func MinTempIn(vs ...float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldIn(FieldMinTemp, vs...))
}

// MinTempNotIn applies the NotIn predicate on the "min_temp" field.
func MinTempNotIn(vs ...float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldNotIn(FieldMinTemp, vs...))
}

// MinTempGT applies the GT predicate on the "min_temp" field.
func MinTempGT(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldGT(FieldMinTemp, v))
}

// MinTempGTE applies the GTE predicate on the "min_temp" field.
func MinTempGTE(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldGTE(FieldMinTemp, v))
}

// MinTempLT applies the LT predicate on the "min_temp" field.
func MinTempLT(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldLT(FieldMinTemp, v))
}

// MinTempLTE applies the LTE predicate on the "min_temp" field.
func MinTempLTE(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldLTE(FieldMinTemp, v))
}

// AvgTempEQ applies the EQ predicate on the "avg_temp" field.
func AvgTempEQ(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldEQ(FieldAvgTemp, v))
}

// AvgTempNEQ applies the NEQ predicate on the "avg_temp" field.
func AvgTempNEQ(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldNEQ(FieldAvgTemp, v))
}

// AvgTempIn applies the In predicate on the "avg_temp" field.
func AvgTempIn(vs ...float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldIn(FieldAvgTemp, vs...))
}

// AvgTempNotIn applies the NotIn predicate on the "avg_temp" field.
func AvgTempNotIn(vs ...float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldNotIn(FieldAvgTemp, vs...))
}

// AvgTempGT applies the GT predicate on the "avg_temp" field.
func AvgTempGT(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldGT(FieldAvgTemp, v))
}

// AvgTempGTE applies the GTE predicate on the "avg_temp" field.
func AvgTempGTE(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldGTE(FieldAvgTemp, v))
}

// AvgTempLT applies the LT predicate on the "avg_temp" field.
func AvgTempLT(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldLT(FieldAvgTemp, v))
}

// AvgTempLTE applies the LTE predicate on the "avg_temp" field.
func AvgTempLTE(v float64) predicate.Forcast {
	return predicate.Forcast(sql.FieldLTE(FieldAvgTemp, v))
}

// HasWeather applies the HasEdge predicate on the "weather" edge.
func HasWeather() predicate.Forcast {
	return predicate.Forcast(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WeatherTable, WeatherColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWeatherWith applies the HasEdge predicate on the "weather" edge with a given conditions (other predicates).
func HasWeatherWith(preds ...predicate.Weather) predicate.Forcast {
	return predicate.Forcast(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WeatherInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WeatherTable, WeatherColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Forcast) predicate.Forcast {
	return predicate.Forcast(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Forcast) predicate.Forcast {
	return predicate.Forcast(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Forcast) predicate.Forcast {
	return predicate.Forcast(func(s *sql.Selector) {
		p(s.Not())
	})
}
