// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"g_api/libs/weather-lib/ent/forecast"
	"g_api/libs/weather-lib/ent/weather"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Weather is the model entity for the Weather schema.
type Weather struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// Time holds the value of the "time" field.
	Time int `json:"time,omitempty"`
	// TimeEpoch holds the value of the "time_epoch" field.
	TimeEpoch time.Time `json:"time_epoch,omitempty"`
	// Temp holds the value of the "temp" field.
	Temp float64 `json:"temp,omitempty"`
	// FeelsLike holds the value of the "feels_like" field.
	FeelsLike float64 `json:"feels_like,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WeatherQuery when eager-loading is set.
	Edges            WeatherEdges `json:"edges"`
	forecast_weather *int
}

// WeatherEdges holds the relations/edges for other nodes in the graph.
type WeatherEdges struct {
	// Forecast holds the value of the forecast edge.
	Forecast *Forecast `json:"forecast,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ForecastOrErr returns the Forecast value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WeatherEdges) ForecastOrErr() (*Forecast, error) {
	if e.loadedTypes[0] {
		if e.Forecast == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: forecast.Label}
		}
		return e.Forecast, nil
	}
	return nil, &NotLoadedError{edge: "forecast"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Weather) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case weather.FieldTemp, weather.FieldFeelsLike:
			values[i] = new(sql.NullFloat64)
		case weather.FieldID, weather.FieldTime:
			values[i] = new(sql.NullInt64)
		case weather.FieldIcon:
			values[i] = new(sql.NullString)
		case weather.FieldTimeEpoch:
			values[i] = new(sql.NullTime)
		case weather.ForeignKeys[0]: // forecast_weather
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Weather", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Weather fields.
func (w *Weather) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case weather.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case weather.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				w.Icon = value.String
			}
		case weather.FieldTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				w.Time = int(value.Int64)
			}
		case weather.FieldTimeEpoch:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_epoch", values[i])
			} else if value.Valid {
				w.TimeEpoch = value.Time
			}
		case weather.FieldTemp:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field temp", values[i])
			} else if value.Valid {
				w.Temp = value.Float64
			}
		case weather.FieldFeelsLike:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field feels_like", values[i])
			} else if value.Valid {
				w.FeelsLike = value.Float64
			}
		case weather.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field forecast_weather", value)
			} else if value.Valid {
				w.forecast_weather = new(int)
				*w.forecast_weather = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryForecast queries the "forecast" edge of the Weather entity.
func (w *Weather) QueryForecast() *ForecastQuery {
	return NewWeatherClient(w.config).QueryForecast(w)
}

// Update returns a builder for updating this Weather.
// Note that you need to call Weather.Unwrap() before calling this method if this Weather
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Weather) Update() *WeatherUpdateOne {
	return NewWeatherClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Weather entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Weather) Unwrap() *Weather {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Weather is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Weather) String() string {
	var builder strings.Builder
	builder.WriteString("Weather(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("icon=")
	builder.WriteString(w.Icon)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(fmt.Sprintf("%v", w.Time))
	builder.WriteString(", ")
	builder.WriteString("time_epoch=")
	builder.WriteString(w.TimeEpoch.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("temp=")
	builder.WriteString(fmt.Sprintf("%v", w.Temp))
	builder.WriteString(", ")
	builder.WriteString("feels_like=")
	builder.WriteString(fmt.Sprintf("%v", w.FeelsLike))
	builder.WriteByte(')')
	return builder.String()
}

// Weathers is a parsable slice of Weather.
type Weathers []*Weather
