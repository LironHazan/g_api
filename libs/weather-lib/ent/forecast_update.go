// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"g_api/libs/weather-lib/ent/forecast"
	"g_api/libs/weather-lib/ent/predicate"
	"g_api/libs/weather-lib/ent/weather"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ForecastUpdate is the builder for updating Forecast entities.
type ForecastUpdate struct {
	config
	hooks    []Hook
	mutation *ForecastMutation
}

// Where appends a list predicates to the ForecastUpdate builder.
func (fu *ForecastUpdate) Where(ps ...predicate.Forecast) *ForecastUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetCountry sets the "country" field.
func (fu *ForecastUpdate) SetCountry(s string) *ForecastUpdate {
	fu.mutation.SetCountry(s)
	return fu
}

// SetRegion sets the "region" field.
func (fu *ForecastUpdate) SetRegion(s string) *ForecastUpdate {
	fu.mutation.SetRegion(s)
	return fu
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableRegion(s *string) *ForecastUpdate {
	if s != nil {
		fu.SetRegion(*s)
	}
	return fu
}

// ClearRegion clears the value of the "region" field.
func (fu *ForecastUpdate) ClearRegion() *ForecastUpdate {
	fu.mutation.ClearRegion()
	return fu
}

// SetDate sets the "date" field.
func (fu *ForecastUpdate) SetDate(t time.Time) *ForecastUpdate {
	fu.mutation.SetDate(t)
	return fu
}

// SetLocaltime sets the "localtime" field.
func (fu *ForecastUpdate) SetLocaltime(t time.Time) *ForecastUpdate {
	fu.mutation.SetLocaltime(t)
	return fu
}

// SetNillableLocaltime sets the "localtime" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableLocaltime(t *time.Time) *ForecastUpdate {
	if t != nil {
		fu.SetLocaltime(*t)
	}
	return fu
}

// ClearLocaltime clears the value of the "localtime" field.
func (fu *ForecastUpdate) ClearLocaltime() *ForecastUpdate {
	fu.mutation.ClearLocaltime()
	return fu
}

// SetIcon sets the "icon" field.
func (fu *ForecastUpdate) SetIcon(s string) *ForecastUpdate {
	fu.mutation.SetIcon(s)
	return fu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableIcon(s *string) *ForecastUpdate {
	if s != nil {
		fu.SetIcon(*s)
	}
	return fu
}

// ClearIcon clears the value of the "icon" field.
func (fu *ForecastUpdate) ClearIcon() *ForecastUpdate {
	fu.mutation.ClearIcon()
	return fu
}

// SetTemp sets the "temp" field.
func (fu *ForecastUpdate) SetTemp(f float64) *ForecastUpdate {
	fu.mutation.ResetTemp()
	fu.mutation.SetTemp(f)
	return fu
}

// SetNillableTemp sets the "temp" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableTemp(f *float64) *ForecastUpdate {
	if f != nil {
		fu.SetTemp(*f)
	}
	return fu
}

// AddTemp adds f to the "temp" field.
func (fu *ForecastUpdate) AddTemp(f float64) *ForecastUpdate {
	fu.mutation.AddTemp(f)
	return fu
}

// AddWeatherIDs adds the "weather" edge to the Weather entity by IDs.
func (fu *ForecastUpdate) AddWeatherIDs(ids ...int) *ForecastUpdate {
	fu.mutation.AddWeatherIDs(ids...)
	return fu
}

// AddWeather adds the "weather" edges to the Weather entity.
func (fu *ForecastUpdate) AddWeather(w ...*Weather) *ForecastUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fu.AddWeatherIDs(ids...)
}

// Mutation returns the ForecastMutation object of the builder.
func (fu *ForecastUpdate) Mutation() *ForecastMutation {
	return fu.mutation
}

// ClearWeather clears all "weather" edges to the Weather entity.
func (fu *ForecastUpdate) ClearWeather() *ForecastUpdate {
	fu.mutation.ClearWeather()
	return fu
}

// RemoveWeatherIDs removes the "weather" edge to Weather entities by IDs.
func (fu *ForecastUpdate) RemoveWeatherIDs(ids ...int) *ForecastUpdate {
	fu.mutation.RemoveWeatherIDs(ids...)
	return fu
}

// RemoveWeather removes "weather" edges to Weather entities.
func (fu *ForecastUpdate) RemoveWeather(w ...*Weather) *ForecastUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fu.RemoveWeatherIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *ForecastUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ForecastMutation](ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *ForecastUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *ForecastUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *ForecastUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *ForecastUpdate) check() error {
	if v, ok := fu.mutation.Country(); ok {
		if err := forecast.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Forecast.country": %w`, err)}
		}
	}
	return nil
}

func (fu *ForecastUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(forecast.Table, forecast.Columns, sqlgraph.NewFieldSpec(forecast.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Country(); ok {
		_spec.SetField(forecast.FieldCountry, field.TypeString, value)
	}
	if value, ok := fu.mutation.Region(); ok {
		_spec.SetField(forecast.FieldRegion, field.TypeString, value)
	}
	if fu.mutation.RegionCleared() {
		_spec.ClearField(forecast.FieldRegion, field.TypeString)
	}
	if value, ok := fu.mutation.Date(); ok {
		_spec.SetField(forecast.FieldDate, field.TypeTime, value)
	}
	if value, ok := fu.mutation.Localtime(); ok {
		_spec.SetField(forecast.FieldLocaltime, field.TypeTime, value)
	}
	if fu.mutation.LocaltimeCleared() {
		_spec.ClearField(forecast.FieldLocaltime, field.TypeTime)
	}
	if value, ok := fu.mutation.Icon(); ok {
		_spec.SetField(forecast.FieldIcon, field.TypeString, value)
	}
	if fu.mutation.IconCleared() {
		_spec.ClearField(forecast.FieldIcon, field.TypeString)
	}
	if value, ok := fu.mutation.Temp(); ok {
		_spec.SetField(forecast.FieldTemp, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedTemp(); ok {
		_spec.AddField(forecast.FieldTemp, field.TypeFloat64, value)
	}
	if fu.mutation.WeatherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.WeatherTable,
			Columns: []string{forecast.WeatherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weather.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedWeatherIDs(); len(nodes) > 0 && !fu.mutation.WeatherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.WeatherTable,
			Columns: []string{forecast.WeatherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weather.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.WeatherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.WeatherTable,
			Columns: []string{forecast.WeatherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weather.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{forecast.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// ForecastUpdateOne is the builder for updating a single Forecast entity.
type ForecastUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ForecastMutation
}

// SetCountry sets the "country" field.
func (fuo *ForecastUpdateOne) SetCountry(s string) *ForecastUpdateOne {
	fuo.mutation.SetCountry(s)
	return fuo
}

// SetRegion sets the "region" field.
func (fuo *ForecastUpdateOne) SetRegion(s string) *ForecastUpdateOne {
	fuo.mutation.SetRegion(s)
	return fuo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableRegion(s *string) *ForecastUpdateOne {
	if s != nil {
		fuo.SetRegion(*s)
	}
	return fuo
}

// ClearRegion clears the value of the "region" field.
func (fuo *ForecastUpdateOne) ClearRegion() *ForecastUpdateOne {
	fuo.mutation.ClearRegion()
	return fuo
}

// SetDate sets the "date" field.
func (fuo *ForecastUpdateOne) SetDate(t time.Time) *ForecastUpdateOne {
	fuo.mutation.SetDate(t)
	return fuo
}

// SetLocaltime sets the "localtime" field.
func (fuo *ForecastUpdateOne) SetLocaltime(t time.Time) *ForecastUpdateOne {
	fuo.mutation.SetLocaltime(t)
	return fuo
}

// SetNillableLocaltime sets the "localtime" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableLocaltime(t *time.Time) *ForecastUpdateOne {
	if t != nil {
		fuo.SetLocaltime(*t)
	}
	return fuo
}

// ClearLocaltime clears the value of the "localtime" field.
func (fuo *ForecastUpdateOne) ClearLocaltime() *ForecastUpdateOne {
	fuo.mutation.ClearLocaltime()
	return fuo
}

// SetIcon sets the "icon" field.
func (fuo *ForecastUpdateOne) SetIcon(s string) *ForecastUpdateOne {
	fuo.mutation.SetIcon(s)
	return fuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableIcon(s *string) *ForecastUpdateOne {
	if s != nil {
		fuo.SetIcon(*s)
	}
	return fuo
}

// ClearIcon clears the value of the "icon" field.
func (fuo *ForecastUpdateOne) ClearIcon() *ForecastUpdateOne {
	fuo.mutation.ClearIcon()
	return fuo
}

// SetTemp sets the "temp" field.
func (fuo *ForecastUpdateOne) SetTemp(f float64) *ForecastUpdateOne {
	fuo.mutation.ResetTemp()
	fuo.mutation.SetTemp(f)
	return fuo
}

// SetNillableTemp sets the "temp" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableTemp(f *float64) *ForecastUpdateOne {
	if f != nil {
		fuo.SetTemp(*f)
	}
	return fuo
}

// AddTemp adds f to the "temp" field.
func (fuo *ForecastUpdateOne) AddTemp(f float64) *ForecastUpdateOne {
	fuo.mutation.AddTemp(f)
	return fuo
}

// AddWeatherIDs adds the "weather" edge to the Weather entity by IDs.
func (fuo *ForecastUpdateOne) AddWeatherIDs(ids ...int) *ForecastUpdateOne {
	fuo.mutation.AddWeatherIDs(ids...)
	return fuo
}

// AddWeather adds the "weather" edges to the Weather entity.
func (fuo *ForecastUpdateOne) AddWeather(w ...*Weather) *ForecastUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fuo.AddWeatherIDs(ids...)
}

// Mutation returns the ForecastMutation object of the builder.
func (fuo *ForecastUpdateOne) Mutation() *ForecastMutation {
	return fuo.mutation
}

// ClearWeather clears all "weather" edges to the Weather entity.
func (fuo *ForecastUpdateOne) ClearWeather() *ForecastUpdateOne {
	fuo.mutation.ClearWeather()
	return fuo
}

// RemoveWeatherIDs removes the "weather" edge to Weather entities by IDs.
func (fuo *ForecastUpdateOne) RemoveWeatherIDs(ids ...int) *ForecastUpdateOne {
	fuo.mutation.RemoveWeatherIDs(ids...)
	return fuo
}

// RemoveWeather removes "weather" edges to Weather entities.
func (fuo *ForecastUpdateOne) RemoveWeather(w ...*Weather) *ForecastUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fuo.RemoveWeatherIDs(ids...)
}

// Where appends a list predicates to the ForecastUpdate builder.
func (fuo *ForecastUpdateOne) Where(ps ...predicate.Forecast) *ForecastUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *ForecastUpdateOne) Select(field string, fields ...string) *ForecastUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Forecast entity.
func (fuo *ForecastUpdateOne) Save(ctx context.Context) (*Forecast, error) {
	return withHooks[*Forecast, ForecastMutation](ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *ForecastUpdateOne) SaveX(ctx context.Context) *Forecast {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *ForecastUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *ForecastUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *ForecastUpdateOne) check() error {
	if v, ok := fuo.mutation.Country(); ok {
		if err := forecast.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Forecast.country": %w`, err)}
		}
	}
	return nil
}

func (fuo *ForecastUpdateOne) sqlSave(ctx context.Context) (_node *Forecast, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(forecast.Table, forecast.Columns, sqlgraph.NewFieldSpec(forecast.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Forecast.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, forecast.FieldID)
		for _, f := range fields {
			if !forecast.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != forecast.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Country(); ok {
		_spec.SetField(forecast.FieldCountry, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Region(); ok {
		_spec.SetField(forecast.FieldRegion, field.TypeString, value)
	}
	if fuo.mutation.RegionCleared() {
		_spec.ClearField(forecast.FieldRegion, field.TypeString)
	}
	if value, ok := fuo.mutation.Date(); ok {
		_spec.SetField(forecast.FieldDate, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.Localtime(); ok {
		_spec.SetField(forecast.FieldLocaltime, field.TypeTime, value)
	}
	if fuo.mutation.LocaltimeCleared() {
		_spec.ClearField(forecast.FieldLocaltime, field.TypeTime)
	}
	if value, ok := fuo.mutation.Icon(); ok {
		_spec.SetField(forecast.FieldIcon, field.TypeString, value)
	}
	if fuo.mutation.IconCleared() {
		_spec.ClearField(forecast.FieldIcon, field.TypeString)
	}
	if value, ok := fuo.mutation.Temp(); ok {
		_spec.SetField(forecast.FieldTemp, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedTemp(); ok {
		_spec.AddField(forecast.FieldTemp, field.TypeFloat64, value)
	}
	if fuo.mutation.WeatherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.WeatherTable,
			Columns: []string{forecast.WeatherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weather.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedWeatherIDs(); len(nodes) > 0 && !fuo.mutation.WeatherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.WeatherTable,
			Columns: []string{forecast.WeatherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weather.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.WeatherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.WeatherTable,
			Columns: []string{forecast.WeatherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weather.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Forecast{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{forecast.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
