// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"g_api/libs/weather-lib/ent/forcast"
	"g_api/libs/weather-lib/ent/weather"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WeatherCreate is the builder for creating a Weather entity.
type WeatherCreate struct {
	config
	mutation *WeatherMutation
	hooks    []Hook
}

// SetIcon sets the "icon" field.
func (wc *WeatherCreate) SetIcon(s string) *WeatherCreate {
	wc.mutation.SetIcon(s)
	return wc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (wc *WeatherCreate) SetNillableIcon(s *string) *WeatherCreate {
	if s != nil {
		wc.SetIcon(*s)
	}
	return wc
}

// SetTime sets the "time" field.
func (wc *WeatherCreate) SetTime(i int) *WeatherCreate {
	wc.mutation.SetTime(i)
	return wc
}

// SetTimeEpoch sets the "time_epoch" field.
func (wc *WeatherCreate) SetTimeEpoch(t time.Time) *WeatherCreate {
	wc.mutation.SetTimeEpoch(t)
	return wc
}

// SetNillableTimeEpoch sets the "time_epoch" field if the given value is not nil.
func (wc *WeatherCreate) SetNillableTimeEpoch(t *time.Time) *WeatherCreate {
	if t != nil {
		wc.SetTimeEpoch(*t)
	}
	return wc
}

// SetTemp sets the "temp" field.
func (wc *WeatherCreate) SetTemp(f float64) *WeatherCreate {
	wc.mutation.SetTemp(f)
	return wc
}

// SetFeelsLike sets the "feels_like" field.
func (wc *WeatherCreate) SetFeelsLike(f float64) *WeatherCreate {
	wc.mutation.SetFeelsLike(f)
	return wc
}

// SetForcastID sets the "forcast" edge to the Forcast entity by ID.
func (wc *WeatherCreate) SetForcastID(id int) *WeatherCreate {
	wc.mutation.SetForcastID(id)
	return wc
}

// SetNillableForcastID sets the "forcast" edge to the Forcast entity by ID if the given value is not nil.
func (wc *WeatherCreate) SetNillableForcastID(id *int) *WeatherCreate {
	if id != nil {
		wc = wc.SetForcastID(*id)
	}
	return wc
}

// SetForcast sets the "forcast" edge to the Forcast entity.
func (wc *WeatherCreate) SetForcast(f *Forcast) *WeatherCreate {
	return wc.SetForcastID(f.ID)
}

// Mutation returns the WeatherMutation object of the builder.
func (wc *WeatherCreate) Mutation() *WeatherMutation {
	return wc.mutation
}

// Save creates the Weather in the database.
func (wc *WeatherCreate) Save(ctx context.Context) (*Weather, error) {
	return withHooks[*Weather, WeatherMutation](ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WeatherCreate) SaveX(ctx context.Context) *Weather {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WeatherCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WeatherCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WeatherCreate) check() error {
	if _, ok := wc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "Weather.time"`)}
	}
	if _, ok := wc.mutation.Temp(); !ok {
		return &ValidationError{Name: "temp", err: errors.New(`ent: missing required field "Weather.temp"`)}
	}
	if _, ok := wc.mutation.FeelsLike(); !ok {
		return &ValidationError{Name: "feels_like", err: errors.New(`ent: missing required field "Weather.feels_like"`)}
	}
	return nil
}

func (wc *WeatherCreate) sqlSave(ctx context.Context) (*Weather, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WeatherCreate) createSpec() (*Weather, *sqlgraph.CreateSpec) {
	var (
		_node = &Weather{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(weather.Table, sqlgraph.NewFieldSpec(weather.FieldID, field.TypeInt))
	)
	if value, ok := wc.mutation.Icon(); ok {
		_spec.SetField(weather.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := wc.mutation.Time(); ok {
		_spec.SetField(weather.FieldTime, field.TypeInt, value)
		_node.Time = value
	}
	if value, ok := wc.mutation.TimeEpoch(); ok {
		_spec.SetField(weather.FieldTimeEpoch, field.TypeTime, value)
		_node.TimeEpoch = value
	}
	if value, ok := wc.mutation.Temp(); ok {
		_spec.SetField(weather.FieldTemp, field.TypeFloat64, value)
		_node.Temp = value
	}
	if value, ok := wc.mutation.FeelsLike(); ok {
		_spec.SetField(weather.FieldFeelsLike, field.TypeFloat64, value)
		_node.FeelsLike = value
	}
	if nodes := wc.mutation.ForcastIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weather.ForcastTable,
			Columns: []string{weather.ForcastColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forcast.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.forcast_weather = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WeatherCreateBulk is the builder for creating many Weather entities in bulk.
type WeatherCreateBulk struct {
	config
	builders []*WeatherCreate
}

// Save creates the Weather entities in the database.
func (wcb *WeatherCreateBulk) Save(ctx context.Context) ([]*Weather, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Weather, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WeatherMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WeatherCreateBulk) SaveX(ctx context.Context) []*Weather {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WeatherCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WeatherCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
